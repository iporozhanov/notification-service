// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	notification "notification-service/notification"

	mock "github.com/stretchr/testify/mock"
)

// APP is an autogenerated mock type for the APP type
type APP struct {
	mock.Mock
}

type APP_Expecter struct {
	mock *mock.Mock
}

func (_m *APP) EXPECT() *APP_Expecter {
	return &APP_Expecter{mock: &_m.Mock}
}

// NewNotification provides a mock function with given fields: n
func (_m *APP) NewNotification(n notification.Notification) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for NewNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(notification.Notification) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APP_NewNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewNotification'
type APP_NewNotification_Call struct {
	*mock.Call
}

// NewNotification is a helper method to define mock.On call
//   - n notification.Notification
func (_e *APP_Expecter) NewNotification(n interface{}) *APP_NewNotification_Call {
	return &APP_NewNotification_Call{Call: _e.mock.On("NewNotification", n)}
}

func (_c *APP_NewNotification_Call) Run(run func(n notification.Notification)) *APP_NewNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(notification.Notification))
	})
	return _c
}

func (_c *APP_NewNotification_Call) Return(_a0 error) *APP_NewNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APP_NewNotification_Call) RunAndReturn(run func(notification.Notification) error) *APP_NewNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPP creates a new instance of APP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPP(t interface {
	mock.TestingT
	Cleanup(func())
}) *APP {
	mock := &APP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
